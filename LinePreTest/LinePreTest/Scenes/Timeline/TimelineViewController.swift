//
//  TimelineViewController.swift
//  LinePreTest
//
//  Created by Thanaphat Suwannikornkul on 28/12/62 BE.
//  Copyright (c) 2562 Thanaphat Suwannikornkul. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import JGProgressHUD

protocol TimelineDisplayLogic: class
{
  func displayTimelineNewsFeed(viewModel: Timeline.NewsFeed.ViewModel)
  func displayFilteredNewsFeed(viewModel: Timeline.FilteredNewsFeed.ViewModel)
}

class TimelineViewController: UIViewController, TimelineDisplayLogic, UITableViewDataSource, UITableViewDelegate, UISearchBarDelegate
{
  var interactor: (TimelineBusinessLogic & TimelineDataStore)?
  var router: (NSObjectProtocol & TimelineRoutingLogic & TimelineDataPassing)?
  
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = TimelineInteractor()
    let presenter = TimelinePresenter()
    let router = TimelineRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    initLayout()
    requestTimelineNewsFeed()
  }
  
  // MARK: IBOutlet
  
  @IBOutlet weak var newsfeedTableView: UITableView!
  
  // MARK: IBAction
  
  @IBAction func onPressNewPostButton(_ sender: Any) {
    router?.routeToNewPost(segue: nil)
  }
  
  // MARK: Pull to Refresh
  
  lazy var refreshControl: UIRefreshControl = {
    let refreshControl = UIRefreshControl()
    refreshControl.addTarget(self,
                             action:#selector(TimelineViewController.handleRefresh(_:)),
                             for: UIControl.Event.valueChanged)
    return refreshControl
  }()
  
  @objc func handleRefresh(_ refreshControl: UIRefreshControl) {
    requestRefreshNewsFeed()
    refreshControl.endRefreshing()
  }
  
  // MARK: Do something
  
  var newsFeedDatasource:[PostAlbum] = []
  
  let hud = JGProgressHUD(style: .dark)
  
  func initLayout()
  {
    title = "Timeline"
    
    newsfeedTableView.register(UINib(nibName: "TimelineTableViewCell", bundle: nil), forCellReuseIdentifier: "TimelineTableViewCell")
    
    newsfeedTableView.addSubview(self.refreshControl)
  }
  
  func requestTimelineNewsFeed()
  {
    hud.textLabel.text = "Loading"
    hud.show(in: self.view)
    
    let request = Timeline.NewsFeed.Request(requestType: .first)
    interactor!.requestNewsFeed(request: request)
  }
  
  func requestRefreshNewsFeed() {
    hud.textLabel.text = "Loading"
    hud.show(in: self.view)
    
    let request = Timeline.NewsFeed.Request(requestType: .refresh)
    interactor!.requestNewsFeed(request: request)
  }
  
  func requestFilteredNewsFeed(searchText:String) {
    let request = Timeline.FilteredNewsFeed.Request(searchText: searchText)
    interactor!.requestFilteredNewsFeed(request: request)
  }
  
  // MARK: TimelineDisplayLogic
  
  func displayTimelineNewsFeed(viewModel: Timeline.NewsFeed.ViewModel)
  {
    newsFeedDatasource = viewModel.postAlbums
    newsfeedTableView.reloadData()
    
    hud.dismiss()
  }
  
  func displayFilteredNewsFeed(viewModel: Timeline.FilteredNewsFeed.ViewModel) {
    newsFeedDatasource = viewModel.postAlbums
    newsfeedTableView.reloadData()
  }
  
  // MARK: UITableViewDataSource
  
  func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
    return newsFeedDatasource.count
  }
  
  func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
    let cell = tableView.dequeueReusableCell(withIdentifier: "TimelineTableViewCell", for: indexPath) as! TimelineTableViewCell

    let item:PostAlbum = newsFeedDatasource[indexPath.row]
    cell.displayCell(postAlbum: item)

    return cell
  }
  
  // MARK: UITableViewDelegate
  
  func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
    tableView.deselectRow(at: indexPath, animated: true)
    
    self.view.endEditing(true)
    
    let item:PostAlbum = newsFeedDatasource[indexPath.row]
    interactor?.selectedPostAlbum = item
    router?.routeToPost(segue: nil)
  }
  
  // MARK: UISearchBarDelegate
  
  func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
    requestFilteredNewsFeed(searchText: searchText)
  }
  
  func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
    self.view.endEditing(true)
  }
}
