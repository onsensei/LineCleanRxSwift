//
//  NewPostViewController.swift
//  LinePreTest
//
//  Created by Thanaphat Suwannikornkul on 29/12/62 BE.
//  Copyright (c) 2562 Thanaphat Suwannikornkul. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol NewPostDisplayLogic: class
{
  func displayAlertAddPhoto(viewModel: NewPost.AlertAddPhoto.ViewModel)
  func displayPickPhoto(viewModel: NewPost.PickPhoto.ViewModel)
  func displayAddPhoto(viewModel: NewPost.AddPhoto.ViewModel)
  
  func displayAlertRemovePhoto(viewModel: NewPost.AlertRemovePhoto.ViewModel)
  func displayRemovePhoto(viewModel: NewPost.RemovePhoto.ViewModel)
}

class NewPostViewController: UIViewController, NewPostDisplayLogic, UITextViewDelegate, UICollectionViewDataSource, UICollectionViewDelegate, UICollectionViewDelegateFlowLayout, UIImagePickerControllerDelegate, UINavigationControllerDelegate
{
  var interactor: (NewPostBusinessLogic & NewPostDataStore)?
  var router: (NSObjectProtocol & NewPostRoutingLogic & NewPostDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = NewPostInteractor()
    let presenter = NewPostPresenter()
    let router = NewPostRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    initLayout()
  }
  
  // MARK: IBOutlet
  
  @IBOutlet weak var postTextView: UITextView!
  @IBOutlet weak var placeholderLabel: UILabel!
  @IBOutlet weak var attachedPhotoCollectionView: UICollectionView!
  @IBOutlet weak var attachedPhotoHeightConstraint: NSLayoutConstraint!
  
  // MARK: IBAction
  
  @IBAction func onPressCloseButton(_ sender: Any) {
    let alert = UIAlertController(title: "Discard Post", message:"This post will be discard.", preferredStyle: UIAlertController.Style.alert)
    alert.addAction(UIAlertAction(title: "Cancel", style: .cancel, handler: { (action: UIAlertAction!) in
      //
    }))
    alert.addAction(UIAlertAction(title: "Discard", style: .destructive, handler: { (action: UIAlertAction!) in
      self.dismiss(animated: true, completion: nil)
    }))
    self.present(alert, animated: true, completion: nil)
  }
  
  @IBAction func onPressCreateButton(_ sender: Any) {
    let alert = UIAlertController(title: "New Post", message:"Create new post completed.", preferredStyle: UIAlertController.Style.alert)
    alert.addAction(UIAlertAction(title: "OK", style: .cancel, handler: { (action: UIAlertAction!) in
      self.dismiss(animated: true, completion: nil)
    }))
    self.present(alert, animated: true, completion: nil)
  }
  
  // MARK: Do something
  
  let CELL_SPACE:CGFloat = 8
  let VIEW_MARGIN:CGFloat = 8
  let MAX_PHOTOS:Int = 3
  
  let imagePicker = UIImagePickerController()
  
  func initLayout()
  {
    title = "New Post"
    
    // style for postTextView
    postTextView.layer.borderWidth = 1
    postTextView.layer.borderColor = UIColor(red:60/255, green:60/255, blue:67/255, alpha: 0.3).cgColor
    postTextView.layer.cornerRadius = 8
    
    // handle dismiss keyboard
    let tap = UITapGestureRecognizer(target: self.view, action: #selector(UIView.endEditing(_:)))
    tap.cancelsTouchesInView = false
    view.addGestureRecognizer(tap)
    
    // setup attachedPhotoCollectionView
    attachedPhotoCollectionView.dataSource = self
    attachedPhotoCollectionView.delegate = self
    attachedPhotoCollectionView.register(UINib(nibName: "PostPhotoCollectionViewCell", bundle: .main), forCellWithReuseIdentifier: "PostPhotoCollectionViewCell")
    attachedPhotoCollectionView.register(UINib(nibName: "AddPhotoCollectionViewCell", bundle: .main), forCellWithReuseIdentifier: "AddPhotoCollectionViewCell")
    attachedPhotoCollectionView.register(UINib(nibName: "DummyCollectionViewCell", bundle: .main), forCellWithReuseIdentifier: "DummyCollectionViewCell")
    
    let photoViewSize = getPhotoCellSize()
    attachedPhotoHeightConstraint.constant = photoViewSize
//    self.view.updateConstraints()
    
    // setup imagePicker
    imagePicker.delegate = self
  }
  
  func getPhotoCellSize() -> CGFloat {
    var remainWidth:CGFloat = self.view.frame.width - (VIEW_MARGIN * 2)
    remainWidth -= CELL_SPACE * CGFloat(MAX_PHOTOS - 1)
    let photoWidth:CGFloat = remainWidth / CGFloat(MAX_PHOTOS)
    return photoWidth
  }
  
  func requestAlertAddPhoto() {
    let request = NewPost.AlertAddPhoto.Request()
    interactor!.requestAlertAddPhoto(request: request)
  }
  
  func requestPickPhoto(imageSourceType: UIImagePickerController.SourceType) {
    let request = NewPost.PickPhoto.Request(imageSourceType: imageSourceType)
    interactor!.requestPickPhoto(request: request)
  }
  
  func requestAddPhoto(image: UIImage) {
    let request = NewPost.AddPhoto.Request(selectedImage: image)
    interactor!.requestAddPhoto(request: request)
  }
  
  func requestAlertRemovePhoto(photoIndex: Int)
  {
    let request = NewPost.AlertRemovePhoto.Request(photoIndex: photoIndex)
    interactor!.requestAlertRemovePhoto(request: request)
  }
  
  func requestRemovePhoto(photoIndex: Int)
  {
    let request = NewPost.RemovePhoto.Request(photoIndex: photoIndex)
    interactor!.requestRemovePhoto(request: request)
  }
  
  // MARK: NewPostDisplayLogic
  
  func displayAlertAddPhoto(viewModel: NewPost.AlertAddPhoto.ViewModel) {
    let alert = UIAlertController(title: "Add Photo", message:"Please choose photo source.", preferredStyle: UIAlertController.Style.actionSheet)
    alert.addAction(UIAlertAction(title: "Cancel", style: .cancel, handler: nil))
    
    if UIImagePickerController.isSourceTypeAvailable(UIImagePickerController.SourceType.photoLibrary) {
      alert.addAction(UIAlertAction(title: "Photo Library", style: .default, handler: { (action: UIAlertAction!) in
        self.requestPickPhoto(imageSourceType: .photoLibrary)
      }))
    }
    
    if UIImagePickerController.isSourceTypeAvailable(UIImagePickerController.SourceType.camera) {
      alert.addAction(UIAlertAction(title: "Camera", style: .default, handler: { (action: UIAlertAction!) in
        self.requestPickPhoto(imageSourceType: .camera)
      }))
    }
    
    self.present(alert, animated: true, completion: nil)
  }
  
  func displayPickPhoto(viewModel: NewPost.PickPhoto.ViewModel) {
    self.imagePicker.allowsEditing = false
    self.imagePicker.sourceType = viewModel.imageSourceType
    self.present(self.imagePicker, animated: true, completion: nil)
  }
  
  func displayAddPhoto(viewModel: NewPost.AddPhoto.ViewModel) {
    attachedPhotoCollectionView.reloadData()
  }
  
  func displayAlertRemovePhoto(viewModel: NewPost.AlertRemovePhoto.ViewModel)
  {
    let alert = UIAlertController(title: "Remove Photo", message:"This photo will be remove.", preferredStyle: UIAlertController.Style.alert)
    alert.addAction(UIAlertAction(title: "Cancel", style: .cancel, handler: nil))
    alert.addAction(UIAlertAction(title: "Remove", style: .destructive, handler: { (action: UIAlertAction!) in
      self.requestRemovePhoto(photoIndex: viewModel.photoIndex)
    }))
    self.present(alert, animated: true, completion: nil)
  }
  
  func displayRemovePhoto(viewModel: NewPost.RemovePhoto.ViewModel)
  {
     self.attachedPhotoCollectionView.reloadData()
  }
  
  // MARK: UITextViewDelegate
  
  func textViewDidBeginEditing(_ textView: UITextView) {
    if textView.text.count == 0 {
      placeholderLabel.isHidden = false
    } else {
      placeholderLabel.isHidden = true
    }
  }
  
  func textViewDidEndEditing(_ textView: UITextView) {
    if textView.text.count == 0 {
      placeholderLabel.isHidden = false
    } else {
      placeholderLabel.isHidden = true
    }
  }
  
  func textViewDidChange(_ textView: UITextView) {
    if textView.text.count == 0 {
      placeholderLabel.isHidden = false
    } else {
      placeholderLabel.isHidden = true
    }
  }
  
  // MARK: UICollectionViewDataSource
  
  func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
    return MAX_PHOTOS
  }
  
  func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
    let photosCount = interactor!.attachedPhotos.count
    if indexPath.row < photosCount {
      // PostPhotoCollectionViewCell
      let cell:PostPhotoCollectionViewCell = collectionView.dequeueReusableCell(withReuseIdentifier: "PostPhotoCollectionViewCell", for: indexPath as IndexPath) as! PostPhotoCollectionViewCell
      
      let image:UIImage = interactor!.attachedPhotos[indexPath.row]
      cell.displayCell(image: image)
      
      return cell
    } else if indexPath.row == photosCount {
      // AddPhotoCollectionViewCell
      let cell:AddPhotoCollectionViewCell = collectionView.dequeueReusableCell(withReuseIdentifier: "AddPhotoCollectionViewCell", for: indexPath as IndexPath) as! AddPhotoCollectionViewCell
      
      return cell
    } else {
      // DummyCollectionViewCell
      let cell:DummyCollectionViewCell = collectionView.dequeueReusableCell(withReuseIdentifier: "DummyCollectionViewCell", for: indexPath as IndexPath) as! DummyCollectionViewCell
      
      return cell
    }
  }
  
  // MARK: UICollectionViewDelegate
  
  func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
    let photosCount = interactor!.attachedPhotos.count
    if indexPath.row < photosCount {
      // PostPhotoCollectionViewCell
      requestAlertRemovePhoto(photoIndex: indexPath.row)
    } else if indexPath.row == photosCount {
      // AddPhotoCollectionViewCell
      requestAlertAddPhoto()
    }
  }
  
  // MARK: UICollectionViewDelegateFlowLayout
  
  func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
    let photoViewSize = getPhotoCellSize()
    return CGSize(width: photoViewSize, height: photoViewSize)
  }
  
  func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
    return CELL_SPACE
  }
  
  func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {
    return CELL_SPACE
  }
  
  // MARK: UIImagePickerControllerDelegate
  
  func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {
    if let pickedImage = info[UIImagePickerController.InfoKey.originalImage] as? UIImage {
      requestAddPhoto(image: pickedImage)
    }
    
    dismiss(animated: true, completion: nil)
  }
  
  func imagePickerControllerDidCancel(_ picker: UIImagePickerController) {
    dismiss(animated: true, completion: nil)
  }
}
