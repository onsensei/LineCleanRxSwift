//
//  NewPostViewController.swift
//  LinePreTest
//
//  Created by Thanaphat Suwannikornkul on 29/12/62 BE.
//  Copyright (c) 2562 Thanaphat Suwannikornkul. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol NewPostDisplayLogic: class
{
  func displaySomething(viewModel: NewPost.Something.ViewModel)
}

class NewPostViewController: UIViewController, NewPostDisplayLogic, UITextViewDelegate, UICollectionViewDataSource, UICollectionViewDelegate, UICollectionViewDelegateFlowLayout, UIImagePickerControllerDelegate, UINavigationControllerDelegate
{
  var interactor: NewPostBusinessLogic?
  var router: (NSObjectProtocol & NewPostRoutingLogic & NewPostDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = NewPostInteractor()
    let presenter = NewPostPresenter()
    let router = NewPostRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    initLayout()
    doSomething()
  }
  
  // MARK: IBOutlet
  
  @IBOutlet weak var postTextView: UITextView!
  @IBOutlet weak var placeholderLabel: UILabel!
  @IBOutlet weak var attachedPhotoCollectionView: UICollectionView!
  @IBOutlet weak var attachedPhotoHeightConstraint: NSLayoutConstraint!
  
  // MARK: IBAction
  
  @IBAction func onPressCloseButton(_ sender: Any) {
    let alert = UIAlertController(title: "Discard Post", message:"This post will be discard.", preferredStyle: UIAlertController.Style.alert)
    alert.addAction(UIAlertAction(title: "Cancel", style: .cancel, handler: { (action: UIAlertAction!) in
      //
    }))
    alert.addAction(UIAlertAction(title: "Discard", style: .destructive, handler: { (action: UIAlertAction!) in
      self.dismiss(animated: true, completion: nil)
    }))
    self.present(alert, animated: true, completion: nil)
  }
  
  @IBAction func onPressCreateButton(_ sender: Any) {
    let alert = UIAlertController(title: "New Post", message:"Create new post completed.", preferredStyle: UIAlertController.Style.alert)
    alert.addAction(UIAlertAction(title: "OK", style: .cancel, handler: { (action: UIAlertAction!) in
      self.dismiss(animated: true, completion: nil)
    }))
    self.present(alert, animated: true, completion: nil)
  }
  
  // MARK: Do something
  
  let imagePicker = UIImagePickerController()
  var attachedPhotos:[UIImage] = []
  
  func initLayout()
  {
    title = "New Post"
    
    postTextView.layer.borderWidth = 1
    postTextView.layer.borderColor = UIColor(red:60/255, green:60/255, blue:67/255, alpha: 0.3).cgColor
    postTextView.layer.cornerRadius = 8
    
    let tap = UITapGestureRecognizer(target: self.view, action: #selector(UIView.endEditing(_:)))
    tap.cancelsTouchesInView = false
    view.addGestureRecognizer(tap)
    
    attachedPhotoCollectionView.dataSource = self
    attachedPhotoCollectionView.delegate = self
    attachedPhotoCollectionView.register(UINib(nibName: "PostPhotoCollectionViewCell", bundle: .main), forCellWithReuseIdentifier: "PostPhotoCollectionViewCell")
    attachedPhotoCollectionView.register(UINib(nibName: "AddPhotoCollectionViewCell", bundle: .main), forCellWithReuseIdentifier: "AddPhotoCollectionViewCell")
    attachedPhotoCollectionView.register(UINib(nibName: "DummyCollectionViewCell", bundle: .main), forCellWithReuseIdentifier: "DummyCollectionViewCell")
    
    let remainWidth = self.view.frame.width - (8 * 4)
    let photoWidth = remainWidth / 3
    attachedPhotoHeightConstraint.constant = photoWidth
//    self.view.updateConstraints()
    
    imagePicker.delegate = self
  }
  
  func doSomething()
  {
    let request = NewPost.Something.Request()
    interactor?.doSomething(request: request)
  }
  
  func displaySomething(viewModel: NewPost.Something.ViewModel)
  {
    //nameTextField.text = viewModel.name
  }
  
  // MARK: UITextViewDelegate
  
  func textViewDidBeginEditing(_ textView: UITextView) {
    if textView.text.count == 0 {
      placeholderLabel.isHidden = false
    } else {
      placeholderLabel.isHidden = true
    }
  }
  
  func textViewDidEndEditing(_ textView: UITextView) {
    if textView.text.count == 0 {
      placeholderLabel.isHidden = false
    } else {
      placeholderLabel.isHidden = true
    }
  }
  
  func textViewDidChange(_ textView: UITextView) {
    if textView.text.count == 0 {
      placeholderLabel.isHidden = false
    } else {
      placeholderLabel.isHidden = true
    }
  }
  
  // MARK: UICollectionViewDataSource
  
  func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
    return 3
  }
  
  func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
    if indexPath.row < attachedPhotos.count {
      // photo cell
      let cell:PostPhotoCollectionViewCell = collectionView.dequeueReusableCell(withReuseIdentifier: "PostPhotoCollectionViewCell", for: indexPath as IndexPath) as! PostPhotoCollectionViewCell
      
      let item:UIImage = attachedPhotos[indexPath.row]
      cell.photoImageView.image = item
      
      return cell
    } else if indexPath.row == attachedPhotos.count {
      // add cell
      let cell:AddPhotoCollectionViewCell = collectionView.dequeueReusableCell(withReuseIdentifier: "AddPhotoCollectionViewCell", for: indexPath as IndexPath) as! AddPhotoCollectionViewCell
      
      return cell
    } else {
      // dummy cell
      let cell:DummyCollectionViewCell = collectionView.dequeueReusableCell(withReuseIdentifier: "DummyCollectionViewCell", for: indexPath as IndexPath) as! DummyCollectionViewCell
      
      return cell
    }
  }
  
  // MARK: UICollectionViewDelegate
  
  func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
    if indexPath.row < attachedPhotos.count {
      // photo cell
      let alert = UIAlertController(title: "Remove Photo", message:"This photo will be remove.", preferredStyle: UIAlertController.Style.alert)
      alert.addAction(UIAlertAction(title: "Cancel", style: .cancel, handler: { (action: UIAlertAction!) in
        //
      }))
      alert.addAction(UIAlertAction(title: "Remove", style: .destructive, handler: { (action: UIAlertAction!) in
        self.attachedPhotos.remove(at: indexPath.row)
        self.attachedPhotoCollectionView.reloadData()
      }))
      self.present(alert, animated: true, completion: nil)
    } else if indexPath.row == attachedPhotos.count {
      // add cell
      let alert = UIAlertController(title: "Add Photo", message:"Please choose photo source.", preferredStyle: UIAlertController.Style.actionSheet)
      alert.addAction(UIAlertAction(title: "Cancel", style: .cancel, handler: { (action: UIAlertAction!) in
        //
      }))
      
      if UIImagePickerController.isSourceTypeAvailable(UIImagePickerController.SourceType.photoLibrary) {
        alert.addAction(UIAlertAction(title: "Photo Library", style: .default, handler: { (action: UIAlertAction!) in
          self.imagePicker.allowsEditing = false
          self.imagePicker.sourceType = .photoLibrary
          self.present(self.imagePicker, animated: true, completion: nil)
        }))
      }
      
      if UIImagePickerController.isSourceTypeAvailable(UIImagePickerController.SourceType.camera) {
        alert.addAction(UIAlertAction(title: "Camera", style: .default, handler: { (action: UIAlertAction!) in
          self.imagePicker.allowsEditing = false
          self.imagePicker.sourceType = .camera
          self.present(self.imagePicker, animated: true, completion: nil)
        }))
      }
      
      self.present(alert, animated: true, completion: nil)
    }
  }
  
  // MARK: UICollectionViewDelegateFlowLayout
  
  func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
    let remainWidth = self.view.frame.width - (8 * 4)
    let photoWidth = remainWidth / 3
    return CGSize(width: photoWidth, height: photoWidth)
  }
  
  func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
    return 8
  }
  
  func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {
    return 8
  }
  
  // MARK: UIImagePickerControllerDelegate
  
  func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {
    if let pickedImage = info[UIImagePickerController.InfoKey.originalImage] as? UIImage {
      attachedPhotos.append(pickedImage)
      attachedPhotoCollectionView.reloadData()
    }
    
    dismiss(animated: true, completion: nil)
  }
  
  func imagePickerControllerDidCancel(_ picker: UIImagePickerController) {
    dismiss(animated: true, completion: nil)
  }
}
