//
//  PostViewController.swift
//  LinePreTest
//
//  Created by Thanaphat Suwannikornkul on 31/12/62 BE.
//  Copyright (c) 2562 Thanaphat Suwannikornkul. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Lightbox

protocol PostDisplayLogic: class
{
  func displaySelectedPostAlbum(viewModel: Post.SelectedPostAlbum.ViewModel)
}

class PostViewController: UIViewController, PostDisplayLogic, UITableViewDataSource, UITableViewDelegate
{
  var interactor: (PostBusinessLogic & PostDataStore)?
  var router: (NSObjectProtocol & PostRoutingLogic & PostDataPassing)?
  
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = PostInteractor()
    let presenter = PostPresenter()
    let router = PostRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    initLayout()
    requestSelectedPostAlbum()
  }
  
  // MARK: IBOutlet
  
  @IBOutlet weak var postTableView: UITableView!
  
  // MARK: Do something
  
  var lightBoxVC:LightboxController?
  
  func initLayout()
  {
    title = "Post"
    
    postTableView.register(UINib(nibName: "PostMessageTableViewCell", bundle: nil), forCellReuseIdentifier: "PostMessageTableViewCell")
    postTableView.register(UINib(nibName: "PostPhotoTableViewCell", bundle: nil), forCellReuseIdentifier: "PostPhotoTableViewCell")
  }
  
  func requestSelectedPostAlbum() {
    let request = Post.SelectedPostAlbum.Request()
    interactor!.requestSelectedPostAlbum(request: request)
  }
  
  // MARK: PostDisplayLogic
  
  func displaySelectedPostAlbum(viewModel: Post.SelectedPostAlbum.ViewModel)
  {
    postTableView.reloadData()
  }
  
  // MARK: UITableViewDataSource
  
  func numberOfSections(in tableView: UITableView) -> Int {
    return 2
  }
  
  func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
    if section == 0 {
      // PostMessageTableViewCell
      return 1
    } else if section == 1 {
      // PostPhotoTableViewCell
      return interactor!.postAlbum.photos.count
    }
    return 0
  }
  
  func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
    if (indexPath.section == 0) {
      // PostMessageTableViewCell
      let cell = tableView.dequeueReusableCell(withIdentifier: "PostMessageTableViewCell", for: indexPath) as! PostMessageTableViewCell
      
      cell.displayCell(postAlbum: interactor!.postAlbum)
      
      return cell
    } else if (indexPath.section == 1) {
      // PostPhotoTableViewCell
      let cell = tableView.dequeueReusableCell(withIdentifier: "PostPhotoTableViewCell", for: indexPath) as! PostPhotoTableViewCell
      
      let photo:PostPhoto = interactor!.postAlbum.photos[indexPath.row]
      cell.displayCell(postPhoto: photo)
      
      return cell
    } else {
      return UITableViewCell()
    }
  }
  
  // MARK: UITableViewDelegate
  
  func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
    tableView.deselectRow(at: indexPath, animated: true)
    
    if indexPath.section == 0 {
      // PostMessageTableViewCell
      // do nothing
    } else if indexPath.section == 1 {
      // PostPhotoTableViewCell
      // !!!
      var images:[LightboxImage] = []
      for photo in (interactor?.postAlbum.photos)! {
        let img: LightboxImage = LightboxImage(imageURL: URL(string: photo.url)!, text: photo.title, videoURL: nil)
        images.append(img)
      }
      
      lightBoxVC = LightboxController(images: images, startIndex: indexPath.row - 1)
      lightBoxVC!.dynamicBackground = true
      lightBoxVC!.modalPresentationStyle = .fullScreen
      present(lightBoxVC!, animated: true, completion: nil)
    }
  }
}
